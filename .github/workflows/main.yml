name: MERN App CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Server Image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mern-server:latest

      - name: Build and Push Client Image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mern-client:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            timestamp=$(date +%s)
            deploy_dir="Exercise_Tracker_$timestamp"
            git clone https://github.com/jaysisharma/Exercise_Tracker.git "$deploy_dir"
            cd "$deploy_dir"

            # Set new port (can alternate between 5000 and 5001)
            if lsof -i :5000 >/dev/null; then
              new_port=5001
            else
              new_port=5000
            fi

            echo "SERVER_PORT=$new_port" > .env
            echo "ATLAS_URI=${{ secrets.ATLAS_URI }}" >> .env

            docker compose pull
            docker compose up -d --force-recreate

            # Update Nginx config to use new port
            sed "s/__SERVER_PORT__/$new_port/" nginx/backend.conf.template > nginx/backend.conf
            sudo cp nginx/backend.conf /etc/nginx/conf.d/backend.conf
            sudo nginx -t
            sudo systemctl reload nginx

            echo "üßº Cleaning up previous containers..."
            old_port=$((5000 + 5001 - new_port))
            docker ps -q --filter "publish=$old_port" | xargs -r docker rm -f

            echo "‚úÖ Deployment completed with zero downtime on port $new_port"

      - name: Slack Notification on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "CI/CD Bot"
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: "good"
          SLACK_TITLE: "Deployment Successful! :white_check_mark:"
          SLACK_MESSAGE: "‚úÖ MERN App deployed successfully to EC2."

      - name: Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "CI/CD Bot"
          SLACK_ICON_EMOJI: ":x:"
          SLACK_COLOR: "danger"
          SLACK_TITLE: "Deployment Failed! :red_circle:"
          SLACK_MESSAGE: "‚ùå Deployment failed. Please check GitHub Actions logs."
