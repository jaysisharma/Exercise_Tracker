name: MERN App CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Server Image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mern-server:latest

      - name: Build and Push Client Image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mern-client:latest

      - name: üöÄ Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üîó Connecting to EC2..."

            cd /home/ubuntu

            echo "üìÅ Creating unique deployment folder..."
            timestamp=$(date +%s)
            deploy_dir="Exercise_Tracker_$timestamp"
            git clone https://github.com/jaysisharma/Exercise_Tracker.git "$deploy_dir"

            cd "$deploy_dir"

            echo "üîê Writing .env files..."
            echo "NODE_ENV=production" > server/.env
            echo "PORT=5000" >> server/.env
            echo "ATLAS_URI=${{ secrets.ATLAS_URI }}" >> server/.env

            echo "üì¶ Pulling latest Docker images..."
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            docker compose pull

            echo "üöÄ Starting new containers..."
            docker compose up -d --force-recreate

            echo "üßº Cleaning up old deployments (keeping latest 2)..."
            cd /home/ubuntu
            ls -dt Exercise_Tracker_* | tail -n +3 | xargs rm -rf || echo "Nothing to clean"

            echo "‚úÖ Deployment finished successfully."

      - name: Slack Notification on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "CI/CD Bot"
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: "good"
          SLACK_TITLE: "Deployment Successful! :white_check_mark:"
          SLACK_MESSAGE: "‚úÖ MERN App deployed successfully to EC2."

      - name: Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "CI/CD Bot"
          SLACK_ICON_EMOJI: ":x:"
          SLACK_COLOR: "danger"
          SLACK_TITLE: "Deployment Failed! :red_circle:"
          SLACK_MESSAGE: "‚ùå Deployment failed. Please check GitHub Actions logs."
